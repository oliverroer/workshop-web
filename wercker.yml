box: golang:1.11
build:
  base-path: /go/src/github.com/mies/workshop-web
  steps:
    - script:
        name: install govendor
        code: go get -u github.com/kardianos/govendor
    
    - script:
        name: install dependencies
        code: govendor sync

    - script:
        name: go vet
        code: govendor vet +local

    # - golint:
    #     exclude: vendor

    - script:
        name: go test
        code: govendor test -v +local

    - script:
        name: go build
        code: |
            ls -la
            go build
            ls -la

push-release:
  steps:
    - script:
        name: prepare
        code: |
            ls -la /
            ls -la
            #mv workshop-web /workshop-web
            ls -la /

    - internal/docker-push:
        ports: "8080"
        working-dir: /pipeline/source
        cmd: ./workshop-web
        env: "CI=true"
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: $DOCKER_REPO
        registry: https://iad.ocir.io/v2
        tag: $WERCKER_GIT_BRANCH

# Deploy to a Kubernetes cluster
deploy-to-kubernetes:
    # We only need a minimal shell environment to run Kubectl.
    box:
        id: alpine
        cmd: /bin/sh
    steps:
    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          ls -lth
          cat kubernetes_*.yml
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kubernetes_*.yml $WERCKER_OUTPUT_DIR/kubernetes

    - kubectl:
        name: deploy to kubernetes
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/

    - kubectl:
        name: set deployment timeout
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: patch deployment/ws-web -p '{"spec":{"progressDeadlineSeconds":60}}'

    - kubectl:
        name: check deployment status
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: rollout status deployment/ws-web
